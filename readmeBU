Author: Nick House
Project: Concurrent UNIX Processes and Shared Memory
Course: CS-4760 Operating Systems, Spring 2021
Directory Name: house.2
Included Files: master.c, bin_adder.c, shared.h, Makefile, README, numGen.sh, .git
Files Created: logfile

What this program does: 

		This program computes the sum of n integers using a binary tree of processes. 
	Pairs of integers within a file will be summed together at each depth until a 
	final sum of all values are summed into a single index at depth 0. This is done 
	by using concurrent processes accessing a single shared memory location to perform 
	computations and save their sums. 
		
	Two programs are used to complete this task: master.c & bin_adder.c

	master.c: 
		
		1) parses command line arguments
		2) Creates and allocates space for Shared Memory
		3) Validates and copies contents of datafile into shared memory in a dataArr[]
		4) Creates and tracks n/2 child processes exectutd with exec() to call bin_adder.c
				-User may dictate the number of concurrent processes not to exceed 20
		5) Tracks time of program and will generate signal to terminate and free memory after 
			 given time
				-Default time is 100 seconds and can be altered by user
				-CTRL+C will also send a signal to terminate process and free memory
		6) Cleans up memory
		7) Adds Program Events to Logfile
	
	bin_adder.c:
		
		1) Takes in an index number (xx) and a depth (yy) to perform binary calculations
		2) Each process goes into a waiting que to complete its process by entering a critical
			 section (solution 4 from notes)  to access shared memory one at a time
		3) The sum of two indices is found by adding the value of the dataArr[xx] value to
			 the value of dataArr[xx + pow(2,Initial_Depth - yy)], this sum then written into
			 dataArr[xx].
		4) Sends updates to the console when critical section is entered and exited
		5) Writes updates into logfile


	numGen.sh:

		Included in the directory is a Random Number Generator 

			This project includes a Bash file titles "numGen.sh". This file
		will generate random length [64,100] containing 
		a single random integer per line in the range [0,256). The integer
		found on the first line will also be the length of the file. 

		- To generate a random number file using numGen.sh, execute following:

			$ bash numGen.sh > [datafile_name] 


	To Execute this program perform the following

	1) Run Makefile to compile source files into executables

		$ make

	2) Create a datafile of random integers if needed
		
		$ bash numGen.sh > datafile_name

	3) Execute master.c with user options

		$ ./master [-h] [-s i] [-t time] datafile_name
	
	4) Logfile will be created if there is not one and append a
		 logfile that alread exists

	5) Clean up directy

		$ make clean


	//===== git Log History =====//


